from is_msgs.image_pb2 import ObjectAnnotation, BoundingPoly, Vertex, PointAnnotation
from ultralytics.engine.results import Results
from typing import List, Dict, Any
from ultralytics import YOLO
import numpy as np


class Detector:
    """Encapsulates the YOLO model for object detection.

    This class loads a trained YOLO model, runs inference on images,
    and provides helper methods to convert results into standardized
    formats used by the system.
    """

    def __init__(self, model_path: str, device: str = "cpu") -> None:
        """Initializes the YOLO object detector.

        Args:
            model_path (str): Path to the trained YOLO model file
                (e.g., "yolov8n.pt").
            device (str): The device on which to load the model
                ("cuda" or "cpu").
        """
        self.model: YOLO = YOLO(model_path)
        self.model.to(device)

    def predict(self, img: np.ndarray) -> Results:
        """Runs object detection on a single image.

        Args:
            img (np.ndarray): Input image as a NumPy array.

        Returns:
            Results: A `ultralytics` results object containing detections.
        """
        results = self.model.predict(source=img, imgsz=96, verbose=False)
        return results[0]

    def results_to_dict(self, results: Results, offset: np.ndarray) -> Dict[str, List[dict]]:
        """Converts YOLO detection results into a standardized dictionary.

        This function extracts the highest-confidence detection (the first
        in the list) and formats it into a structured dictionary.

        Args:
            results (Results): The Ultralytics results object containing detections.
            offset (np.ndarray): A NumPy array with the (x, y) coordinates of
                the top-left corner of the ROI relative to the original image.
                This is used to correct detection coordinates.

        Returns:
            Dict[str, List[dict]]: Dictionary with remapped detections containing:
                - "boxes" (List[dict]): List with the main bounding box.
                    - "conf" (float): Confidence score of the box.
                    - "xyxy" (np.ndarray): [x1, y1, x2, y2] coordinates of the box,
                      adjusted with the offset.
                - "keypoints" (List[dict]): List with the first two keypoints.
                    - "conf" (float): Confidence score of the keypoint.
                    - "xy" (np.ndarray): [x, y] coordinates of the keypoint,
                      adjusted with the offset.
        """
        results_dict = {
            "boxes": [],
            "keypoints": [],
        }
        offset_4_x_1 = np.tile(offset, 2)
        num_results = len(results.boxes)
        if num_results > 0:
            results_dict["boxes"].append({
                "conf": results.boxes.conf.numpy()[0],
                "xyxy": results.boxes.xyxy.numpy()[0] + offset_4_x_1,
            })
            results_dict["keypoints"].append({
                "conf": results.keypoints.conf.numpy()[0][0],
                "xy": results.keypoints.xy.numpy()[0][0] + offset,
            })
            results_dict["keypoints"].append({
                "conf": results.keypoints.conf.numpy()[0][1],
                "xy": results.keypoints.xy.numpy()[0][1] + offset,
            })
        return results_dict

    @staticmethod
    def dict_to_obj_annot(result_dict: Dict[str, Any]) -> ObjectAnnotation:
        """Converts a detection dictionary into the `ObjectAnnotation` format from `is-msgs`.

        Args:
            result_dict (Dict[str, Any]): A dictionary containing detection data,
                as generated by `results_to_dict`.

        Returns:
            ObjectAnnotation: An `is-msgs` protocol object, ready to be published.
        """
        box = result_dict["boxes"][0]
        kps = result_dict["keypoints"]

        return ObjectAnnotation(
            label="Tiffany",
            id=0,
            score=box["conf"],
            region=BoundingPoly(
                vertices=[
                    Vertex(x=box["xyxy"][0], y=box["xyxy"][1]),
                    Vertex(x=box["xyxy"][2], y=box["xyxy"][3]),
                ]
            ),
            keypoints=[
                PointAnnotation(
                    id=i,
                    score=kps[i]["conf"],
                    position=Vertex(x=kps[i]["xy"][0], y=kps[i]["xy"][1]),
                )
                for i in range(len(kps))
            ]
        )
