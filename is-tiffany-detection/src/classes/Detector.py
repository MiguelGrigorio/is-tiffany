from is_msgs.image_pb2 import ObjectAnnotation, BoundingPoly, Vertex
from ultralytics.engine.results import Results
from typing import List, Dict, Any
from ultralytics import YOLO
import numpy as np

class Detector():
    """Encapsulates the YOLO model for object detection.

    This class loads a detection model, performs inference on images,
    and provides methods to convert the results into standardized formats.
    """

    def __init__(self, model_path: str, device: str = "cuda") -> None:
        """Initializes the YOLO object detector.

        Args:
            model_path (str): The path to the trained model file (e.g., 'yolov8n.pt').
            device (str): The device to load the model on ('cuda' or 'cpu').
        """

        self.model = YOLO(model_path)
        self.model.to(device)

    def predict(self, img: np.ndarray) -> Results:
        """Performs object detection on a single image.

        Args:
            img (np.ndarray): The input image as a NumPy array.

        Returns:
            results (Results): A `ultralytics` result object containing the detections.
        """

        results = self.model.predict(source=img, imgsz=640, verbose=False)
        return results[0]
    
    def results_to_dict(self, results: Results) -> Dict[str, List[dict]]:
        """Converts the YOLO detection result into a dictionary.

        This function extracts the detection with the highest confidence (the first in the
        results list) and formats it into a standardized dictionary.

        Args:
            results (Results): The result object returned by the `predict` method.

        Returns:
            results (Dict[str, List[dict]]): A dictionary containing the bounding box (xyxy)
                                                and the confidence (conf) of the best detection.
        """

        results_dict = {
            "boxes": [],
        }
        if len(results.boxes) > 0:
            results_dict["boxes"].append({
                "conf": results.boxes.conf.cpu().numpy()[0],
                "xyxy": results.boxes.xyxy.cpu().numpy()[0],
            })
        return results_dict

    @staticmethod
    def dict_to_obj_annot(result_dict: Dict[str, Any]) -> ObjectAnnotation:
        """Converts a detection dictionary to the `ObjectAnnotation` format from `is-msgs`.

        Args:
            result_dict (Dict[str, Any]): A dictionary containing detection data,
                                            as generated by `results_to_dict`.

        Returns:
            results (ObjectAnnotation): An object in the `is-msgs` protocol format,
                                        ready to be published.
        """
        box = result_dict["boxes"][0]
        return ObjectAnnotation(
            label="Tiffany",
            id=0,
            score=box["conf"],
            region=BoundingPoly(
                vertices=[
                    Vertex(x=box["xyxy"][0], y=box["xyxy"][1]),
                    Vertex(x=box["xyxy"][2], y=box["xyxy"][3]),
                ]
            ),
        )